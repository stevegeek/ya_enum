module Yae
  VERSION: String

  class Enum
    extend ::Forwardable

    def self.inherited: (Enum subclass) -> void

    # Define an entry in the enum
    def self.define: (Symbol key, untyped value) -> void

    # Get the enum value
    def self.get: (Symbol key, ?raises: bool) -> (nil | untyped)

    # Get multiple keys at once
    def self.get_multiple: (*Symbol keys, ?raises: bool) -> Array[untyped]

    # Check if value is used in enum
    def self.include?: (untyped value) -> bool

    # Convert a string to a enum key
    def self.keyify: (String name) -> Symbol

    # Delegate methods to the hash
    def self.key: (untyped) -> Symbol

    def self.key?: (Symbol key) -> bool

    def self.keys: () -> Array[Symbol]

    def self.values: () -> Array[untyped]

    def self.each: () { ([Symbol, untyped]) -> void } -> Hash[Symbol, untyped]

    def self.map: () { ([Symbol, untyped]) -> untyped } -> Array[untyped]

    def self.to_a: () -> Array[[Symbol, untyped]]

    def self.select: () { ([Symbol, untyped]) -> boolish } -> Hash[Symbol, untyped]
      | () -> Enumerator[[[Symbol, untyped]], Hash[Symbol, untyped]]

    def self.reject: () { (Symbol, untyped) -> boolish } -> Hash[Symbol, untyped]
      | () -> Enumerator[[Symbol, untyped], Hash[Symbol, untyped]]

    def self.to_h: () -> Hash[Symbol, untyped]

    private

    attr_reader self.enum_store: Hash[Symbol, untyped]
  end

end
